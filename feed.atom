<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<link rel="self" href="http://andyhansen.co.nz/" />
	<id>http://andyhansen.co.nz/</id>
	<title>Andy Hansen</title>
	<rights>2018</rights>
	<updated>2018-01-21T22:17:42Z</updated>
	<logo>http://andyhansen.co.nz/images/headers/forrest-cavale-13484.jpg</logo>
	<subtitle>Andy Hansen's Blog</subtitle>
	<entry>
		<link href="http://andyhansen.co.nz/posts/starting-your-teams-agile-transformation" />
		<link rel="enclosure" type="image" href="http://andyhansen.co.nz/images/headers/forrest-cavale-13484.jpg" />
		<id>http://andyhansen.co.nz/posts/starting-your-teams-agile-transformation</id>
		<title>Starting your team's agile transformation</title>
		<updated>2017-07-16T00:00:00Z</updated>
		<content>&lt;p&gt;Agile is a great way of building software, but it can take some getting used to.
You may be wanting to dip your toes in to see what it's like, but not want to change your process all at once.
Unfortunately, it can be difficult to know what to try first.
Not just that, if your customer hasn't tried Agile before, then they may not understand why it's worth it.&lt;/p&gt;
&lt;p&gt;In this post you'll get a outline of some first steps you can take, and what to expect when you try them out.
I've tried to pick steps to try as a team which don't require huge buy-in from the client.
You can start by trying a single one, but you will certainly benefit from combining a few together.
If the client can see how effective your team becomes by working in a more Agile way, it will be much easier to convince them to fully commit to Agile delivery.
This is in no way a complete resource, but I'm hoping it will give you a bit of an idea on the techniques you want to try as a starting point.
The advice I'm providing is coming from a service company perspective, but I'm hoping this post will be of use for anyone wanting to upgrade their teams delivery model.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A visual board&lt;/strong&gt; is where you track what state the work is in.
It helps the team focus on getting work finished, and minimizes the amount of work in progress.
A basic visual board has 3 columns, “to do”, “doing”, and “done”, but can be extended with more detailed columns if you find the basic format lacking.
With a visual board, the work becomes less about the individuals, &amp;quot;what I have to do to finish this task&amp;quot;, and more about the team, &amp;quot;what can the team do to get this work finished&amp;quot;.
If you aren't sure how to start your board, try and get the help of a scrum master, or &lt;a href="http://agileforall.com/building-a-useful-task-board/"&gt;check out this useful guide for getting started&lt;/a&gt;.
I'd recommend starting with a physical board, because it's easier for the team to use during their stand ups, and is easier to change as you work out what columns work best for the team.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Daily stand ups&lt;/strong&gt; are short meetings where team members come together to share what they worked on yesterday, and what they will be working on today.
The main benefit of the stand up is that you keep the team in sync without relying on email.
It also provides a time for team members to talk about issues blocking their progress.
Stand ups don’t require the stakeholders, but having them there will save you from a lot of email communication.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Focusing on the MVP&lt;/strong&gt; is a perfect way to avoid waste.
If you are unfamiliar with the concept of the &lt;a href="https://en.wikipedia.org/wiki/Minimum_viable_product"&gt;Minimum Valuable Product&lt;/a&gt;, I've found &lt;a href="https://www.quora.com/What-is-a-minimum-viable-product"&gt;a great Quora discussion which explains it&lt;/a&gt;.
A rough idea is that the team builds the basic version of the all the key features, before starting to build any &amp;quot;nice to haves&amp;quot;.
Think of it being a bit like the &amp;quot;free&amp;quot; tier version of the final product, good enough to get by, but with a few rough edges.
It can be tricky to work out what these key features are, but if the team has a chance to build like this, then the project will be in a much better place if you ever find that you are running out of budget.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sitting together&lt;/strong&gt; will make the team feel much more cohesive.
When there is a bug, the tester doesn't have to walk across the room or send an email, they just tap the developer on the shoulder and let them know.
This is one of the easier changes you can make, because it just requires that the team be willing to try it.
Personally I've found I work a lot more successfully when I'm sitting near my team mates, you will also find that some good Agile practices, such as peer programming, will start happening naturally.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Retrospectives&lt;/strong&gt; are a meeting where the team has a chance to reflect on what went well, what they struggled with, and decide on actions to fix issues the team are facing.
No team is ever going to be perfect, but you can use the retrospective to make sure you are always improving.
Retrospectives are most effective when the team feels comfortable that they can give their feedback without backlash, so all participants in the meeting need to have an open mind.
Following through on retrospectives can also be difficult, each action should have a team member who will fulfill it before the next retrospective.
I would recommend having someone experienced run your first retrospective, but if you don't have someone who can help, then have the team &lt;a href="https://medium.com/&amp;#64;simo_morris/how-to-run-your-first-retrospective-14cbb26a5e2d"&gt;read through some &amp;quot;first retro&amp;quot; resources&lt;/a&gt; so that you are all on the same page.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reviews&lt;/strong&gt; are well worth it if you can convince the stakeholders to attend.
Every few weeks, a member of the team shows the functionality they have completed since the last review.
This is a chance for the stakeholder to see what the team has been doing, and give feedback on any adjustments they would like to have made.
Reviews help the team know that they are building the right thing, as the client has had multiple chances to review the functionality as it has been built.
If the team feels comfortable, the review is a chance for the stakeholders to try the functionality out themselves.&lt;/p&gt;
&lt;p&gt;Giving the stakeholders a chance to try the functionality does not have to be limited to the review, but it's a good opportunity to get them used to the concept of trying out the functionality early.
If you find they are enjoying the reviews, you can take it a step further and get stakeholders trying out features as the team completes them.
I've found the best time to push for this is when a project is nearing a release, because this is when the cost of getting something wrong is most clear.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What's next?&lt;/h2&gt;
&lt;p&gt;If you've found some success in these techniques, now may be the time to start looking into fully committing to a battle tested Agile framework such as &lt;a href="https://www.scrum.org/resources/what-is-scrum"&gt;Scrum&lt;/a&gt; or &lt;a href="https://leankit.com/learn/kanban/what-is-kanban/"&gt;Kanban&lt;/a&gt;.
There is a multitude of material online for each of these frameworks, and I'd recommend getting an experienced Agile coach to help your team get started.&lt;/p&gt;
&lt;p&gt;For those of you with an interest in learning more about Agile in a casual way, check out the podcast, &lt;a href="http://www.thisagilelife.com/"&gt;&amp;quot;This Agile Life&amp;quot;&lt;/a&gt;.
They have some great episodes around topics like &lt;a href="http://www.thisagilelife.com/115"&gt;the current state of Agile&lt;/a&gt;, and &lt;a href="http://www.thisagilelife.com/103"&gt;being thankful for Agile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope this post has been useful to you!
Feel free to leave a comment if you need clarification on anything, or to suggest any techniques you have found helpful.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Agile is a great way of building software, but it can take some getting used to.
You may be wanting to dip your toes in to see what it's like, but not want to change your process all at once.
Unfortunately, it can be difficult to know what to try first.
Not just that, if your customer hasn't tried Agile before, then they may not understand why it's worth it.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://andyhansen.co.nz/posts/humility-as-a-programmer" />
		<link rel="enclosure" type="image" href="http://andyhansen.co.nz/images/headers/forrest-cavale-13484.jpg" />
		<id>http://andyhansen.co.nz/posts/humility-as-a-programmer</id>
		<title>Humility is an important trait for any programmer</title>
		<updated>2017-07-02T00:00:00Z</updated>
		<content>&lt;p&gt;&lt;em&gt;&amp;quot;Hey pal, can't wait to work with you. I love that high opinion you have of yourself, and that you always make sure you get your way!&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I'd like to think a sentence like this has never been said in real life, and that I've worded it sarcastically enough that it was obvious why.
Though you (hopefully) won't find someone as ego driven as the example above, you will come across people who have traits that make them difficult to work with.
No one is ever going to be perfect, but to avoid being &amp;quot;that guy&amp;quot;, you need to act with humility.&lt;/p&gt;
&lt;p&gt;Humility is being able to say that you don't know the answer, it's being able to ask for help, and it's being open for constructive criticism.
You can have humility and still be proud of your work, you can still let your opinion be heard, but you need to understand that your opinion isn't always the most important.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://raygun.com/blog/how-good-is-pair-programming-really/"&gt;Pair programming&lt;/a&gt; is a great example of how effective humility can be in action.
With humility, pair programming is two people building on each others ideas to come up with the best possible solution.
Without humility, it's two people arguing about why their way is the best.
A persons effectiveness when pair programming shows that they value other peoples opinions, and that they don't mind opening themselves up to criticism.
The major advantages of pair programming, such as low bug count, are simply not going to show their beautiful faces unless each person is able to comfortably point out mistakes.&lt;/p&gt;
&lt;p&gt;Humility is not always easy.
Early in my career I often feel victim to the &lt;a href="https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect"&gt;dunning kruger effect&lt;/a&gt;.
When you work on existing code bases you may find yourself wondering, &amp;quot;Why on &lt;em&gt;earth&lt;/em&gt; would they build it like that?&amp;quot;
It takes a bit of experience to understand that you can't always write perfect code.
Complex problems have multiple solutions, and you may not always end up picking the right one.
You will always see ways to improve your old code, because you are always becoming a better developer.
Being too vocal about the mistakes of others before you've learnt these lessons is a sure fire way to make yourself look like an ass.&lt;/p&gt;
&lt;p&gt;Humility is obviously not just some switch you can turn on and off, but I've found that it's a very useful concept to remember as I work day to day.
Hopefully this post has been a benefit to you, but if not, feel free to leave a comment below.
I still quite new to blogging, so any feedback is greatly appreciated.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;&lt;em&gt;"Hey pal, can't wait to work with you. I love that high opinion you have of yourself, and that you always make sure you get your way!"&lt;/em&gt;&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://andyhansen.co.nz/posts/programming-podcasts-to-check-out" />
		<link rel="enclosure" type="image" href="http://andyhansen.co.nz/images/headers/forrest-cavale-13484.jpg" />
		<id>http://andyhansen.co.nz/posts/programming-podcasts-to-check-out</id>
		<title>Programming Podcasts to Check Out</title>
		<updated>2017-03-21T00:00:00Z</updated>
		<content>&lt;p&gt;This last year I've been finding myself listening to podcasts more and more.
What I really love about podcasts is that I'm able to learn about a wide range of programming topics as I walk to and from work.
I've put together this small list of programming podcasts I've found helpful, because they are just such high quality I want to shout it from the rooftops.
So lets get into it!&lt;/p&gt;
&lt;h2 id="software-engineering-radio"&gt;Software Engineering Radio&lt;/h2&gt;
&lt;p&gt;I don't think I could recommend &lt;a href="http://www.se-radio.net/category/episodes/"&gt;Software Engineering Radio&lt;/a&gt; enough.
Every episode I listen to is one I want to listen to again.
Their episodes will often not be directly about code languages, but rather things like the development process, architecture, and career management.
The speaker and host on the podcast cover a lot of ground in each episode, with enough topic changes that nothing feels like it's dragging on.
Episodes makes for a good introduction to a topic, and will provide you with direction on the best place to learn more.
Not every episode is going to be relevant to you, but with a current backlog off 285 episodes there is going to be something in there for everyone.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.se-radio.net/2016/05/se-radio-episode-256-jay-fields-on-working-effectively-with-unit-tests/"&gt;Episode 256 Jay Fields on Working Effectively with Unit Tests&lt;/a&gt;: I've been trying to improvement unit testing recently, and in this episode was great for learning about some methodologies I hadn't been introduced to before.
I ended up liking this episode so much that I bought Jay Field's book, &lt;a href="https://leanpub.com/wewut"&gt;&amp;quot;Working Effectively with Unit Tests&amp;quot;&lt;/a&gt; the moment the podcast was over.
If you've been using unit tests at work, but haven't thought much about their structure, then I highly recommend checking out this episode.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.se-radio.net/2015/11/se-radio-episode-242-dave-thomas-on-innovating-legacy-systems/"&gt;Episode 242 Dave Thomas on Innovating Legacy Systems&lt;/a&gt;: I really underestimated how much I would like this episode.
It covered a topic I've (fortunately) not had to deal with much in my career so far.
&lt;a href="https://twitter.com/daveathomas"&gt;Dave Thomas&lt;/a&gt; shares his knowledge around how you can convince a business to let you innovate a legacy system, what is worth upgrading, and some good approaches to take when you start working on it.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.se-radio.net/2014/10/episode-212-randy-shoup-on-company-culture/"&gt;Episode 212 Randy Shoup on Company Culture&lt;/a&gt;: This episode on company culture was an interesting look at what a healthy company culture should look like, and the side effects of a toxic company culture.
You will get an idea of what it takes to have a successful company, and the drain that a toxic culture can bring.
This episode feels particularly relevant with the &lt;a href="https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber"&gt;recent problems being surfaced around Uber's culture&lt;/a&gt;.
There is also some interesting discussion around the way eBay used to develop their software, which sounds a bit like Scrum's estranged cousin.&lt;/p&gt;
&lt;h2 id="devchat.tv"&gt;DevChat.tv&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devchat.tv/"&gt;DevChat.tv&lt;/a&gt; is the parent for a range of my favourite podcasts including &lt;a href="https://devchat.tv/adv-in-angular"&gt;Adventures in Angular&lt;/a&gt;, &lt;a href="https://devchat.tv/js-jabber"&gt;JavaScript Jabber&lt;/a&gt;, and &lt;a href="https://devchat.tv/freelancers"&gt;Freelancer's Show&lt;/a&gt;.
The host, &lt;a href="https://twitter.com/cmaxw"&gt;Charles Max Wood&lt;/a&gt;, does a great job of covering interesting, relevant topics, and the panelists bring a lot of real world experience.
The episodes have a round table nature, which lets you get many different perspectives on any topic they are covering.
Panelists will often have different opinions on the covered topic, which generates quality back and forth as they try to express their views.
Here are a few of my favourite episodes under the DevChat.tv umbrella of podcasts.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devchat.tv/adv-in-angular/111-aia-redux-and-angular-2-with-nate-murray"&gt;Episode 111 AiA Redux and Angular 2 with Nate Murray&lt;/a&gt;: I really enjoyed this episode because how how much debate their was around whether or not a tool like Redux is necessary, with a lot of back and forth comparing it to two way binding. At the time I didn't actually have a perspective on either, so getting each so well explained was a real benefit.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devchat.tv/adv-in-angular/113-aia-angular-2-in-a-net-world"&gt;Episode 113 AiA Angular 2 in a .NET World&lt;/a&gt;: This episode was great for me because I am primarily a .NET developer.
&lt;a href="https://twitter.com/superswiss"&gt;Marcel Good&lt;/a&gt; is a really knowledgeable guy, and it was a great look at how that ecosystem fits together.
What I really liked about this episode is that Marcel gives a really good overview of the type of clients he gets for .NET/Angular projects, and the types of system the clients are migrating from.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devchat.tv/freelancers/the-freelancers-show-088-blogging-with-leslie-samuel"&gt;The Freelancers Show 088 - Blogging with Leslie Samuel&lt;/a&gt;: I love the Freelancer Show because it keeps me ambitious.
This show is a great resource for anyone who plans on freelancing at some point in the future.
I thought I better give a shout out to the episode which made me want to start this blog, but honestly there are so many great episodes.&lt;/p&gt;
&lt;p&gt;So there are my recommendations.
I've picked out a few of my favourites, but I'd recommend having a quick look at their episode lists.
I'm uncovering new episodes to love all the time, and it's rare I'm left disappointed.&lt;/p&gt;
&lt;p&gt;If you've enjoyed any of the podcasts I've listed, or if you have any podcast recommendations of your own, I'd love to hear about them!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;This last year I've been finding myself listening to podcasts more and more.
What I really love about podcasts is that I'm able to learn about a wide range of programming topics as I walk to and from work.
I've put together this small list of programming podcasts I've found helpful, because they are just such high quality I want to shout it from the rooftops.
So lets get into it!&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://andyhansen.co.nz/posts/web-config-for-a-static-site" />
		<link rel="enclosure" type="image" href="http://andyhansen.co.nz/images/headers/forrest-cavale-13484.jpg" />
		<id>http://andyhansen.co.nz/posts/web-config-for-a-static-site</id>
		<title>Web.config for a Static Site</title>
		<updated>2017-02-12T00:00:00Z</updated>
		<content>&lt;p&gt;When I originally set up this blog, I was using a very basic web.config.
I quickly found this wasn't complete enough for my needs, so gave it a bit of an upgrade.&lt;/p&gt;
&lt;p&gt;In this post I'll go through my the sections of my web.config and explain why they are necessary.
At the bottom of the post you will find the config in full, so you can copy it for your own static site.
I can only confirm that this config works with my Wyam site on Azure, but it should work with any other IIS hosted static site.&lt;/p&gt;
&lt;h2 id="web.config-sections"&gt;Web.config sections&lt;/h2&gt;
&lt;p&gt;Here I'll go through the sections of my web.config, what they do, and why I'm using them.&lt;/p&gt;
&lt;h3 id="error-handling"&gt;Error handling&lt;/h3&gt;
&lt;p&gt;I have a couple of error redirects so that the user isn't given a blank page when something goes wrong.
These pages cover 404 (page not found), and 500 (server) errors.
If either of these errors occur, the user will be redirected to the specified error pages I've created so that they know what has gone wrong.
In my case, the error pages are named 404.html and 500.html, but you can name yours whatever you like by changing the path.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;httpErrors errorMode=&amp;quot;Custom&amp;quot;&amp;gt;
    &amp;lt;remove statusCode=&amp;quot;500&amp;quot; subStatusCode=&amp;quot;-1&amp;quot; /&amp;gt;
    &amp;lt;remove statusCode=&amp;quot;404&amp;quot; subStatusCode=&amp;quot;-1&amp;quot; /&amp;gt;
    &amp;lt;error statusCode=&amp;quot;404&amp;quot; prefixLanguageFilePath=&amp;quot;&amp;quot; path=&amp;quot;/404.html&amp;quot; responseMode=&amp;quot;ExecuteURL&amp;quot; /&amp;gt;
    &amp;lt;error statusCode=&amp;quot;500&amp;quot; prefixLanguageFilePath=&amp;quot;&amp;quot; path=&amp;quot;/500.html&amp;quot; responseMode=&amp;quot;ExecuteURL&amp;quot; /&amp;gt;
    &amp;lt;error statusCode=&amp;quot;500&amp;quot; subStatusCode=&amp;quot;100&amp;quot; path=&amp;quot;/500.html&amp;quot; responseMode=&amp;quot;ExecuteURL&amp;quot; /&amp;gt;
&amp;lt;/httpErrors&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="routing-rules"&gt;Routing rules&lt;/h3&gt;
&lt;p&gt;I've got a rule set up to remove the .html from the end of the URL, making it look cleaner.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;rule name=&amp;quot;RewriteHtml&amp;quot;&amp;gt;
    &amp;lt;match url=&amp;quot;^(.*)$&amp;quot; /&amp;gt;
    &amp;lt;conditions logicalGrouping=&amp;quot;MatchAll&amp;quot;&amp;gt;
        &amp;lt;add input=&amp;quot;{REMOTE_PORT}&amp;quot; pattern=&amp;quot;.*&amp;quot; /&amp;gt;
        &amp;lt;add input=&amp;quot;{REQUEST_FILENAME}&amp;quot; matchType=&amp;quot;IsFile&amp;quot; negate=&amp;quot;true&amp;quot; /&amp;gt;
        &amp;lt;add input=&amp;quot;{REQUEST_FILENAME}&amp;quot; matchType=&amp;quot;IsDirectory&amp;quot; negate=&amp;quot;true&amp;quot; /&amp;gt;
    &amp;lt;/conditions&amp;gt;
    &amp;lt;action type=&amp;quot;Rewrite&amp;quot; url=&amp;quot;{R:1}.html&amp;quot; /&amp;gt;
&amp;lt;/rule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This rule will remove the &amp;quot;www.&amp;quot; from the URLs.
You won't break anything if you don't include this rule, so you can skip it if you prefer the default behaviour.
I'm removing them on my site because I like to keep the URLs as short as possible.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;rule name=&amp;quot;Remove WWW&amp;quot; stopProcessing=&amp;quot;true&amp;quot;&amp;gt;
    &amp;lt;match url=&amp;quot;(.*)&amp;quot; ignoreCase=&amp;quot;true&amp;quot; /&amp;gt;
    &amp;lt;conditions logicalGrouping=&amp;quot;MatchAll&amp;quot;&amp;gt;
        &amp;lt;add input=&amp;quot;{HTTP_HOST}&amp;quot; pattern=&amp;quot;^www\.(.+)$&amp;quot; /&amp;gt;
    &amp;lt;/conditions&amp;gt;
    &amp;lt;action type=&amp;quot;Redirect&amp;quot; url=&amp;quot;http://{C:1}/{R:0}&amp;quot; appendQueryString=&amp;quot;true&amp;quot; redirectType=&amp;quot;Permanent&amp;quot; /&amp;gt;
&amp;lt;/rule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you DON'T have SSL set up, then need to make sure you don't include this rule.
Though this rule is a must if you are using SSL, because it will ensure that the user is always viewing the secure version of your site.&lt;/p&gt;
&lt;p&gt;SSL is not as necessary for static sites, because no user data is being transferred between your servers and your users.
However, it is best practice to have it set up, and it will help with your &lt;a href="https://en.wikipedia.org/wiki/Search_engine_optimization"&gt;Search Engine Optimization&lt;/a&gt;.
If you are interested in setting up SSL, you can get a certificate for free via &lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;rule name=&amp;quot;Redirect to HTTPS&amp;quot; stopProcessing=&amp;quot;true&amp;quot;&amp;gt;
    &amp;lt;match url=&amp;quot;(.*)&amp;quot; /&amp;gt;
    &amp;lt;conditions&amp;gt;
        &amp;lt;add input=&amp;quot;{REMOTE_PORT}&amp;quot; pattern=&amp;quot;.*&amp;quot; /&amp;gt;
        &amp;lt;add input=&amp;quot;{HTTPS}&amp;quot; pattern=&amp;quot;^OFF$&amp;quot; /&amp;gt;
    &amp;lt;/conditions&amp;gt;
    &amp;lt;action type=&amp;quot;Redirect&amp;quot; url=&amp;quot;https://{HTTP_HOST}/{R:1}&amp;quot; redirectType=&amp;quot;Permanent&amp;quot; /&amp;gt;
&amp;lt;/rule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="static-content-file-types"&gt;Static content file types&lt;/h3&gt;
&lt;p&gt;Static content was the most important section I was missing in my original web.config.
It tells ISS what the content type is for file extensions it doesn't recognize.
Before it was set up, the browser couldn't open the RSS feed for my site, and some of my font files weren't loading.
IIS didn't recognize the file extensions, so served up the files with the incorrect file type of &amp;quot;application&amp;quot;.
So for each extension IIS doesn't know, we tell it what the file type is.&lt;/p&gt;
&lt;p&gt;As you can see below, each extension is defined using the same pattern.
We tell IIS to forget everything it knows about a particular file extension, and then we tell it what the file type should be.
I've got a bit of future proofing in my web.config, so you may want to only include extensions you are using now.
I didn't see the harm of adding more now, I don't want to edit my web.config each time I use a new file type on my blog.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;staticContent&amp;gt;
    &amp;lt;remove fileExtension=&amp;quot;.mp4&amp;quot; /&amp;gt;
    &amp;lt;mimeMap fileExtension=&amp;quot;.mp4&amp;quot; mimeType=&amp;quot;video/mp4&amp;quot; /&amp;gt;
    &amp;lt;remove fileExtension=&amp;quot;.m4v&amp;quot; /&amp;gt;
    &amp;lt;mimeMap fileExtension=&amp;quot;.m4v&amp;quot; mimeType=&amp;quot;video/m4v&amp;quot; /&amp;gt;
    &amp;lt;remove fileExtension=&amp;quot;.ogg&amp;quot; /&amp;gt;
    &amp;lt;mimeMap fileExtension=&amp;quot;.ogg&amp;quot; mimeType=&amp;quot;video/ogg&amp;quot; /&amp;gt;
    &amp;lt;remove fileExtension=&amp;quot;.ogv&amp;quot; /&amp;gt;
    &amp;lt;mimeMap fileExtension=&amp;quot;.ogv&amp;quot; mimeType=&amp;quot;video/ogg&amp;quot; /&amp;gt;
    &amp;lt;remove fileExtension=&amp;quot;.webm&amp;quot; /&amp;gt;
    &amp;lt;mimeMap fileExtension=&amp;quot;.webm&amp;quot; mimeType=&amp;quot;video/webm&amp;quot; /&amp;gt;
    &amp;lt;remove fileExtension=&amp;quot;.oga&amp;quot; /&amp;gt;
    &amp;lt;mimeMap fileExtension=&amp;quot;.oga&amp;quot; mimeType=&amp;quot;audio/ogg&amp;quot; /&amp;gt;
    &amp;lt;remove fileExtension=&amp;quot;.spx&amp;quot; /&amp;gt;
    &amp;lt;mimeMap fileExtension=&amp;quot;.spx&amp;quot; mimeType=&amp;quot;audio/ogg&amp;quot; /&amp;gt;
    &amp;lt;remove fileExtension=&amp;quot;.svg&amp;quot; /&amp;gt;
    &amp;lt;mimeMap fileExtension=&amp;quot;.svg&amp;quot; mimeType=&amp;quot;image/svg+xml&amp;quot; /&amp;gt;
    &amp;lt;remove fileExtension=&amp;quot;.svgz&amp;quot; /&amp;gt;
    &amp;lt;mimeMap fileExtension=&amp;quot;.svgz&amp;quot; mimeType=&amp;quot;image/svg+xml&amp;quot; /&amp;gt;

    &amp;lt;!-- fonts --&amp;gt;
    &amp;lt;remove fileExtension=&amp;quot;.otf&amp;quot; /&amp;gt;
    &amp;lt;mimeMap fileExtension=&amp;quot;.otf&amp;quot; mimeType=&amp;quot;font/otf&amp;quot; /&amp;gt;
    &amp;lt;remove fileExtension=&amp;quot;.eot&amp;quot; /&amp;gt;
    &amp;lt;mimeMap fileExtension=&amp;quot;.eot&amp;quot; mimeType=&amp;quot;application/vnd.ms-fontobject&amp;quot; /&amp;gt;
    &amp;lt;remove fileExtension=&amp;quot;.ttf&amp;quot; /&amp;gt;
    &amp;lt;mimeMap fileExtension=&amp;quot;.ttf&amp;quot; mimeType=&amp;quot;application/octet-stream&amp;quot; /&amp;gt;
    &amp;lt;remove fileExtension=&amp;quot;.woff&amp;quot; /&amp;gt;
    &amp;lt;mimeMap fileExtension=&amp;quot;.woff&amp;quot; mimeType=&amp;quot;application/font-woff&amp;quot; /&amp;gt;
    &amp;lt;remove fileExtension=&amp;quot;.woff2&amp;quot; /&amp;gt;
    &amp;lt;mimeMap fileExtension=&amp;quot;.woff2&amp;quot; mimeType=&amp;quot;application/font-woff2&amp;quot; /&amp;gt;

    &amp;lt;!-- feeds --&amp;gt;
    &amp;lt;remove fileExtension=&amp;quot;.rss&amp;quot; /&amp;gt;
    &amp;lt;mimeMap fileExtension=&amp;quot;.rss&amp;quot; mimeType=&amp;quot;application/rss+xml&amp;quot; /&amp;gt;
    &amp;lt;remove fileExtension=&amp;quot;.atom&amp;quot; /&amp;gt;
    &amp;lt;mimeMap fileExtension=&amp;quot;.atom&amp;quot; mimeType=&amp;quot;application/atom+xml&amp;quot; /&amp;gt;
&amp;lt;/staticContent&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="full-web.config"&gt;Full web.config&lt;/h2&gt;
&lt;p&gt;So there we have it. Hopefully my explanations all made sense, and if not, leave a comment and let me know how I can make the post better.
Below is the full contents of my web.config.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;configuration&amp;gt;
    &amp;lt;system.webServer&amp;gt;
        &amp;lt;httpErrors errorMode=&amp;quot;Custom&amp;quot;&amp;gt;
            &amp;lt;remove statusCode=&amp;quot;500&amp;quot; subStatusCode=&amp;quot;-1&amp;quot; /&amp;gt;
            &amp;lt;remove statusCode=&amp;quot;404&amp;quot; subStatusCode=&amp;quot;-1&amp;quot; /&amp;gt;
            &amp;lt;error statusCode=&amp;quot;404&amp;quot; prefixLanguageFilePath=&amp;quot;&amp;quot; path=&amp;quot;/404.html&amp;quot; responseMode=&amp;quot;ExecuteURL&amp;quot; /&amp;gt;
            &amp;lt;error statusCode=&amp;quot;500&amp;quot; prefixLanguageFilePath=&amp;quot;&amp;quot; path=&amp;quot;/500.html&amp;quot; responseMode=&amp;quot;ExecuteURL&amp;quot; /&amp;gt;
            &amp;lt;error statusCode=&amp;quot;500&amp;quot; subStatusCode=&amp;quot;100&amp;quot; path=&amp;quot;/500.html&amp;quot; responseMode=&amp;quot;ExecuteURL&amp;quot; /&amp;gt;
        &amp;lt;/httpErrors&amp;gt;
        &amp;lt;rewrite&amp;gt;
            &amp;lt;rules&amp;gt;
                &amp;lt;rule name=&amp;quot;Redirect to HTTPS&amp;quot; stopProcessing=&amp;quot;true&amp;quot;&amp;gt;
                    &amp;lt;match url=&amp;quot;(.*)&amp;quot; /&amp;gt;
                    &amp;lt;conditions&amp;gt;
                        &amp;lt;add input=&amp;quot;{REMOTE_PORT}&amp;quot; pattern=&amp;quot;.*&amp;quot; /&amp;gt;
                        &amp;lt;add input=&amp;quot;{HTTPS}&amp;quot; pattern=&amp;quot;^OFF$&amp;quot; /&amp;gt;
                    &amp;lt;/conditions&amp;gt;
                    &amp;lt;action type=&amp;quot;Redirect&amp;quot; url=&amp;quot;https://{HTTP_HOST}/{R:1}&amp;quot; redirectType=&amp;quot;Permanent&amp;quot; /&amp;gt;
                &amp;lt;/rule&amp;gt;
                &amp;lt;rule name=&amp;quot;RewriteHtml&amp;quot;&amp;gt;
                    &amp;lt;match url=&amp;quot;^(.*)$&amp;quot; /&amp;gt;
                    &amp;lt;conditions logicalGrouping=&amp;quot;MatchAll&amp;quot;&amp;gt;
                        &amp;lt;add input=&amp;quot;{REMOTE_PORT}&amp;quot; pattern=&amp;quot;.*&amp;quot; /&amp;gt;
                        &amp;lt;add input=&amp;quot;{REQUEST_FILENAME}&amp;quot; matchType=&amp;quot;IsFile&amp;quot; negate=&amp;quot;true&amp;quot; /&amp;gt;
                        &amp;lt;add input=&amp;quot;{REQUEST_FILENAME}&amp;quot; matchType=&amp;quot;IsDirectory&amp;quot; negate=&amp;quot;true&amp;quot; /&amp;gt;
                    &amp;lt;/conditions&amp;gt;
                    &amp;lt;action type=&amp;quot;Rewrite&amp;quot; url=&amp;quot;{R:1}.html&amp;quot; /&amp;gt;
                &amp;lt;/rule&amp;gt;
                &amp;lt;rule name=&amp;quot;Remove WWW&amp;quot; stopProcessing=&amp;quot;true&amp;quot;&amp;gt;
                    &amp;lt;match url=&amp;quot;(.*)&amp;quot; ignoreCase=&amp;quot;true&amp;quot; /&amp;gt;
                    &amp;lt;conditions logicalGrouping=&amp;quot;MatchAll&amp;quot;&amp;gt;
                        &amp;lt;add input=&amp;quot;{HTTP_HOST}&amp;quot; pattern=&amp;quot;^www\.(.+)$&amp;quot; /&amp;gt;
                    &amp;lt;/conditions&amp;gt;
                    &amp;lt;action type=&amp;quot;Redirect&amp;quot; url=&amp;quot;http://{C:1}/{R:0}&amp;quot; appendQueryString=&amp;quot;true&amp;quot; redirectType=&amp;quot;Permanent&amp;quot; /&amp;gt;
                &amp;lt;/rule&amp;gt;
            &amp;lt;/rules&amp;gt;
        &amp;lt;/rewrite&amp;gt;
        &amp;lt;staticContent&amp;gt;
            &amp;lt;remove fileExtension=&amp;quot;.mp4&amp;quot; /&amp;gt;
            &amp;lt;mimeMap fileExtension=&amp;quot;.mp4&amp;quot; mimeType=&amp;quot;video/mp4&amp;quot; /&amp;gt;
            &amp;lt;remove fileExtension=&amp;quot;.m4v&amp;quot; /&amp;gt;
            &amp;lt;mimeMap fileExtension=&amp;quot;.m4v&amp;quot; mimeType=&amp;quot;video/m4v&amp;quot; /&amp;gt;
            &amp;lt;remove fileExtension=&amp;quot;.ogg&amp;quot; /&amp;gt;
            &amp;lt;mimeMap fileExtension=&amp;quot;.ogg&amp;quot; mimeType=&amp;quot;video/ogg&amp;quot; /&amp;gt;
            &amp;lt;remove fileExtension=&amp;quot;.ogv&amp;quot; /&amp;gt;
            &amp;lt;mimeMap fileExtension=&amp;quot;.ogv&amp;quot; mimeType=&amp;quot;video/ogg&amp;quot; /&amp;gt;
            &amp;lt;remove fileExtension=&amp;quot;.webm&amp;quot; /&amp;gt;
            &amp;lt;mimeMap fileExtension=&amp;quot;.webm&amp;quot; mimeType=&amp;quot;video/webm&amp;quot; /&amp;gt;
            &amp;lt;remove fileExtension=&amp;quot;.oga&amp;quot; /&amp;gt;
            &amp;lt;mimeMap fileExtension=&amp;quot;.oga&amp;quot; mimeType=&amp;quot;audio/ogg&amp;quot; /&amp;gt;
            &amp;lt;remove fileExtension=&amp;quot;.spx&amp;quot; /&amp;gt;
            &amp;lt;mimeMap fileExtension=&amp;quot;.spx&amp;quot; mimeType=&amp;quot;audio/ogg&amp;quot; /&amp;gt;
            &amp;lt;remove fileExtension=&amp;quot;.svg&amp;quot; /&amp;gt;
            &amp;lt;mimeMap fileExtension=&amp;quot;.svg&amp;quot; mimeType=&amp;quot;image/svg+xml&amp;quot; /&amp;gt;
            &amp;lt;remove fileExtension=&amp;quot;.svgz&amp;quot; /&amp;gt;
            &amp;lt;mimeMap fileExtension=&amp;quot;.svgz&amp;quot; mimeType=&amp;quot;image/svg+xml&amp;quot; /&amp;gt;

            &amp;lt;!-- fonts --&amp;gt;
            &amp;lt;remove fileExtension=&amp;quot;.otf&amp;quot; /&amp;gt;
            &amp;lt;mimeMap fileExtension=&amp;quot;.otf&amp;quot; mimeType=&amp;quot;font/otf&amp;quot; /&amp;gt;
            &amp;lt;remove fileExtension=&amp;quot;.eot&amp;quot; /&amp;gt;
            &amp;lt;mimeMap fileExtension=&amp;quot;.eot&amp;quot; mimeType=&amp;quot;application/vnd.ms-fontobject&amp;quot; /&amp;gt;
            &amp;lt;remove fileExtension=&amp;quot;.ttf&amp;quot; /&amp;gt;
            &amp;lt;mimeMap fileExtension=&amp;quot;.ttf&amp;quot; mimeType=&amp;quot;application/octet-stream&amp;quot; /&amp;gt;
            &amp;lt;remove fileExtension=&amp;quot;.woff&amp;quot; /&amp;gt;
            &amp;lt;mimeMap fileExtension=&amp;quot;.woff&amp;quot; mimeType=&amp;quot;application/font-woff&amp;quot; /&amp;gt;
            &amp;lt;remove fileExtension=&amp;quot;.woff2&amp;quot; /&amp;gt;
            &amp;lt;mimeMap fileExtension=&amp;quot;.woff2&amp;quot; mimeType=&amp;quot;application/font-woff2&amp;quot; /&amp;gt;

            &amp;lt;!-- feeds --&amp;gt;
            &amp;lt;remove fileExtension=&amp;quot;.rss&amp;quot; /&amp;gt;
            &amp;lt;mimeMap fileExtension=&amp;quot;.rss&amp;quot; mimeType=&amp;quot;application/rss+xml&amp;quot; /&amp;gt;
            &amp;lt;remove fileExtension=&amp;quot;.atom&amp;quot; /&amp;gt;
            &amp;lt;mimeMap fileExtension=&amp;quot;.atom&amp;quot; mimeType=&amp;quot;application/atom+xml&amp;quot; /&amp;gt;
        &amp;lt;/staticContent&amp;gt;
    &amp;lt;/system.webServer&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>&lt;p&gt;When I originally set up this blog, I was using a very basic web.config.
I quickly found this wasn't complete enough for my needs, so gave it a bit of an upgrade.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://andyhansen.co.nz/posts/tips-to-improve-your-scrum-team" />
		<link rel="enclosure" type="image" href="http://andyhansen.co.nz/images/headers/forrest-cavale-13484.jpg" />
		<id>http://andyhansen.co.nz/posts/tips-to-improve-your-scrum-team</id>
		<title>Tips to Improve Your Scrum Team</title>
		<updated>2017-02-07T00:00:00Z</updated>
		<content>&lt;p&gt;I've worked on a few Scrum Teams, and each of them have had different pain points.
I thought I'd write a quick post about some of the improvements made in those teams which ended up having the largest impact.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: This post contains some very colloquial Scrum terms, but with any luck they will be inline with your terms as well.
If you aren't familiar with Scrum, the guide is actually pretty darn tiny, and can be found at &lt;a href="http://www.scrumguides.org/"&gt;www.scrumguides.org&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="pulling-smaller-stories-into-sprints"&gt;Pulling smaller stories into sprints&lt;/h2&gt;
&lt;p&gt;When we first tried Scrum, we were pulling in large stories without full understanding the consequences.
Usually when a story is large it means there are still some details to be worked out, which increases the risk of discovering problems.
These problems may mean that you aren't able to finish the story in your current sprint, making the teams velocity uneven and less predictable.
Deciding when a story is &amp;quot;too large&amp;quot; can be difficult, but a good start is to put a hard limit on the minimum size a story must be before you bring it into a sprint.
By forcing the team to break down the stories, they are more likely to discover the problems at the planning stage, where it is much easier to mitigate them.&lt;/p&gt;
&lt;p&gt;There can be some push back against breaking things down into small stories.
Developers can feel like it slows their productivity when they have work on such small bits at a time.
However, the benefit is that there is a consistent pipeline of code ready to be tested, and because smaller stories cover less functionality, they are easier to complete.&lt;/p&gt;
&lt;p&gt;If you are unsure how to break down your large stories, the best way we found was to use &lt;a href="https://en.wikipedia.org/wiki/Vertical_slice"&gt;vertical slices&lt;/a&gt;, and I've found this works very well.
The concept of vertical slices is to deliver small but complete functions of the system.
Breaking things down like this can feel unnatural at first, &amp;quot;Why don't I just get everything in the database done at once?&amp;quot;, but this is a great way of breaking down work because it means that each completed story is a releasible piece of functionality on its own.&lt;/p&gt;
&lt;p&gt;For more information, I've found links on &lt;a href="http://blog.agilistic.nl/8-useful-strategies-for-splitting-large-user-stories-and-a-cheatsheet/"&gt;splitting large user stories&lt;/a&gt; and &lt;a href="http://agileforall.com/vertical-slices-and-scale/"&gt;vertical slices&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="having-all-the-skills-you-need-within-the-scrum-team"&gt;Having all the skills you need within the Scrum Team&lt;/h2&gt;
&lt;p&gt;There were times it just didn't make sense to have a fulltime front-end developer on the team.
An unfortunate side effect of this was that when a story was ready for front-end development, we were relying on someone outside of the team to get it done.
This put a block of time between developers finishing with a story, and that story being ready for test, putting the testing up to a day behind development.
The delay between development and test also means that on average you are going to have more stories in progress, is a risk if you aren't going to be able to complete them all.&lt;/p&gt;
&lt;p&gt;We were able to mitigate this risk by upskilling the developers to learn front-end design as well.
The site we were working did not have a complex design, so it was not a large leap for the existing (though dusty) front-end development skills we had.
Our original front-end designer was still resourced for a small amount pf time each week on our project, but that was now for reviewing our front-end code, and providing advise when we got stuck.
It ended up working very well, 95% of the front-end design could be done by the Scrum Team with no help, and as time went on we became more independent, freeing out original front-end developer up for other projects.&lt;/p&gt;
&lt;p&gt;This is not going to be the fix for every team, but I think that where possible, the members of the Scrum Team should be trying to upskill in whatever areas the team is lacking.
For example, a Scrum Team benefits from a developer who can help with testing, because when you are getting to the end of a sprint you are better off closing the open stories, than starting to work on new ones.&lt;/p&gt;
&lt;h2 id="focusing-on-the-minimum-viable-product-before-building-more-features"&gt;Focusing on the minimum viable product before building more features&lt;/h2&gt;
&lt;p&gt;One of the huge benefits of Scrum is that you don't need to plan all the details of a product right from the beginning.
It's good to have a vision for where how you want the it to end up, but you will waste a lot of time if you are trying to work out fine details on something you can't even use yet.
We found that we were able to build better products by first building the &lt;a href="https://leanstack.com/minimum-viable-product/"&gt;minimum viable product (MVP)&lt;/a&gt; which is &amp;quot;the smallest thing you can build which delivers customer value&amp;quot;.
In the journey of creating that, both the team and the client are going to have a better idea on which direction to start building out new features.
It can also be a time to let users try the product and get their feedback on which features will provide them with the most value.
By focusing on the MVP, you minimize the risk that you are building features which aren't needed, or aren't going to be used.&lt;/p&gt;
&lt;p&gt;I found a great wee post which explains &lt;a href="http://scrumandkanban.co.uk/what-is-an-mvp/"&gt;what a minimum viable product is, and how it differs from a minimum marketable product&lt;/a&gt;.
It's well worth checking out because it is a distinction which should be made when you are building a product for a public audience.&lt;/p&gt;
&lt;h2 id="finally"&gt;Finally&lt;/h2&gt;
&lt;p&gt;Here some bits of advice which I couldn't be bothered writing a paragraph on.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Keeping the retrospectives going, even when the project is going well.&lt;/em&gt; At times we found ourselves getting complacent. Even when the team is performing well, there will always be room for improvement, so continuing retrospectives is vital.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Written developer tests before signing off a story.&lt;/em&gt; This helped a lot in making sure that we weren't getting lazy and sending a story to test without checking it ourselves.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Not starting a story if it can't be completed in the current sprint.&lt;/em&gt; This links up with what I've said earlier. If the stories are piling up and it's nearing the end of the sprint. A developer is better off helping to close a story than to start a new one.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Letting the team control how much work is pulled into a sprint.&lt;/em&gt; The team will be the best at judging how much work they can get through. By forcing more work into a sprint you are just increasing the likelihood that work is not going to get finished.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Bringing in size marker stories to refinement meetings.&lt;/em&gt; The team will get better at sizing stories consistently if they have some existing stories there to compare to.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope you enjoyed the post, if you have comments or criticism please let me know in the comment box below.
I'm pretty new to the whole blogging thing so any advice is greatly appreciated.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I've worked on a few Scrum Teams, and each of them have had different pain points.
I thought I'd write a quick post about some of the improvements made in those teams which ended up having the largest impact.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://andyhansen.co.nz/posts/deploying-a-wyam-blog-to-azure" />
		<link rel="enclosure" type="image" href="http://andyhansen.co.nz/images/headers/forrest-cavale-13484.jpg" />
		<id>http://andyhansen.co.nz/posts/deploying-a-wyam-blog-to-azure</id>
		<title>Deploying a Wyam Blog to Azure</title>
		<updated>2017-01-29T00:00:00Z</updated>
		<content>&lt;p&gt;I thought I better write an article about how I've put this blog together.
I'll give a brief summary of the technologies I use, why I use them, and then go through the basic steps I've followed to put it all together.&lt;/p&gt;
&lt;h2 id="technologies"&gt;Technologies&lt;/h2&gt;
&lt;p&gt;I'm using Wyam to generate the blog because there is a lot of positive buzz around it, and I was interested in using a static site generator built in C#.
Since I am comfortable in C#, and Wyam is still a young project it felt like a good opportunity for me to start contributing to the open source community.&lt;/p&gt;
&lt;p&gt;For source control I'm using Visual Studio Team Services, because they offer unlimited free private repositories.&lt;/p&gt;
&lt;p&gt;Everything is hosted in Azure because I get so many Azure credits through work that I don't know what to do with them.
There are plenty of other options such as Github Pages, but chances are if you are checking out this blog post you are in the same boat as me.&lt;/p&gt;
&lt;h2 id="steps"&gt;Steps&lt;/h2&gt;
&lt;p&gt;Now I'll go through the process of creating and deploying the blog. Some aspects of the process are covered much better by other articles, and in those cases I'll be linking you in that direction.&lt;/p&gt;
&lt;h3 id="create-the-wyam-site"&gt;Create the Wyam site&lt;/h3&gt;
&lt;p&gt;Wyam can be downloaded from the &lt;a href="https://wyam.io/"&gt;Wyam site&lt;/a&gt;.
I highly suggest following the instructions under &lt;a href="https://wyam.io/docs/usage/obtaining"&gt;&amp;quot;Obtaining&amp;quot; in the &amp;quot;Usage&amp;quot; section&lt;/a&gt;.
With Wyam installed, navigate a local directory for your blog and run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wyam new -r Blog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tells Wyam to create a new blog in the current directory using the blog template.
Blog posts themselves are stored in the &lt;code&gt;input/posts/&lt;/code&gt; directory, and are created using markdown.
The way to learn how to set up your site will be checking out some &lt;a href="https://wyam.io/docs/resources/built-with-wyam"&gt;open source blogs written in Wyam&lt;/a&gt;, or to check some &lt;a href="https://github.com/Wyamio/Wyam/tree/master/example"&gt;examples&lt;/a&gt; put together by &lt;a href="https://daveaglick.com/"&gt;Dave Glick&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can compile your blog by running the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wyam -r Blog -t CleanBlog -p -w
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I'll now quickly explain the parameters. &lt;code&gt;-r&lt;/code&gt; tells it to use the Blog recipe. &lt;code&gt;-t&lt;/code&gt; tells it which theme to use. In this case, I'm using CleanBlog.
The &lt;code&gt;-p&lt;/code&gt; tells it to host it locally where it can be found at &lt;a href="http://localhost:5080/"&gt;http://localhost:5080/&lt;/a&gt; by default.
Lastly &lt;code&gt;-w&lt;/code&gt; tells it to watch for any changes in the posts directory, or the &lt;code&gt;config.wyam&lt;/code&gt; file, when a change occurs it will compile everything again.&lt;/p&gt;
&lt;p&gt;Create a file in the base of the directory and call it &lt;code&gt;config.wyam&lt;/code&gt;.
In this file you put the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GlobalMetadata[&amp;quot;Title&amp;quot;] = &amp;quot;&amp;lt;Your blogs title&amp;gt;&amp;quot;;
GlobalMetadata[&amp;quot;Description&amp;quot;] = &amp;quot;&amp;lt;You blog's description&amp;gt;&amp;quot;;
GlobalMetadata[&amp;quot;Intro&amp;quot;] = &amp;quot;&amp;lt;Small blurb about your blog&amp;gt;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When your blog re-compiles you should see the changes appear on the main page.&lt;/p&gt;
&lt;p&gt;Those were the basics for setting up the blog itself, now lets improve our workflow by adding a build tool.&lt;/p&gt;
&lt;h3 id="set-up-cake"&gt;Set up Cake&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://cakebuild.net/"&gt;Cake&lt;/a&gt; is an automation build tool, we are able to use it to build our blog from the command-line using simple commands.
In the future we are going to be able to use these same commands to get our blog compiled and ready for Azure from source control.
If you feel more comfortable you can follow the official &lt;a href="http://cakebuild.net/docs/tutorials/getting-started"&gt;Cake tutorial&lt;/a&gt;, but some of my later steps will assume you have a build.cake file looking like mine bellow.&lt;/p&gt;
&lt;p&gt;We need two files to get Cake up and running, the first is &lt;code&gt;build.cake&lt;/code&gt;.
Create this file in the root directory of your blog, and put the following code into it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#tool nuget:?package=Wyam&amp;amp;prerelease
#addin nuget:?package=Cake.Wyam&amp;amp;prerelease

//////////////////////////////////////////////////////////////////////
// ARGUMENTS
//////////////////////////////////////////////////////////////////////

var target = Argument(&amp;quot;target&amp;quot;, &amp;quot;Default&amp;quot;);

//////////////////////////////////////////////////////////////////////
// TASKS
//////////////////////////////////////////////////////////////////////

Task(&amp;quot;Build&amp;quot;)
    .Does(() =&amp;gt;
    {
        Wyam(new WyamSettings
        {
            Recipe = &amp;quot;Blog&amp;quot;,
            Theme = &amp;quot;CleanBlog&amp;quot;,
            UpdatePackages = true
        });
    });
    
Task(&amp;quot;Preview&amp;quot;)
    .Does(() =&amp;gt;
    {
        Wyam(new WyamSettings
        {
            Recipe = &amp;quot;Blog&amp;quot;,
            Theme = &amp;quot;CleanBlog&amp;quot;,
            UpdatePackages = true,
            Preview = true,
            Watch = true
        });        
    });

//////////////////////////////////////////////////////////////////////
// TASK TARGETS
//////////////////////////////////////////////////////////////////////

Task(&amp;quot;Default&amp;quot;)
    .IsDependentOn(&amp;quot;Preview&amp;quot;);    
    
//////////////////////////////////////////////////////////////////////
// EXECUTION
//////////////////////////////////////////////////////////////////////

RunTarget(target);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This sets us up with two basic tasks. Our Build task will just build the blog using the CleanBlog theme.
The Preview task will build the blog, watch the files, and create a localhost instance for you to view it in.
By default it runs the &amp;quot;Preview&amp;quot; task.
The code I'm using is this file is a striped down version of the one used for &lt;a href="https://github.com/daveaglick/daveaglick/blob/master/build.cake"&gt;Dave Glick's blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next you will need to download the powershell file &lt;code&gt;build.ps1&lt;/code&gt; from the &lt;a href="https://github.com/cake-build/example"&gt;example repository&lt;/a&gt;.
If you are getting stuck I recommend checking out the &lt;a href="http://cakebuild.net/docs/tutorials/getting-started"&gt;Cake getting started&lt;/a&gt; page now.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;build.ps1&lt;/code&gt; powershell file is a way of interfacing with Cake in a clean way. It will make sure we have Cake downloaded and then run the default task set up in your &lt;code&gt;build.cake&lt;/code&gt; file.
If you want to run the &amp;quot;Build&amp;quot; task you can do so by running &lt;code&gt;.\build.ps1 -target Build&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;So now we have some build automation set up, lets get this all into source control.&lt;/p&gt;
&lt;h3 id="commit-it-to-source-control"&gt;Commit it to source control&lt;/h3&gt;
&lt;p&gt;If you haven't already, you now want to &lt;a href="https://www.visualstudio.com/en-us/docs/setup-admin/team-services/sign-up-for-visual-studio-team-services"&gt;create a Visual Studio Team Services account&lt;/a&gt;, and a &lt;a href="https://www.visualstudio.com/en-us/docs/setup-admin/create-team-project"&gt;a Visual Studio Team Services project&lt;/a&gt;.
Create a new git repository in this project, and commit your code to it.
There are some great git tutorials made by both &lt;a href="https://www.atlassian.com/git/tutorials"&gt;Atlassian&lt;/a&gt; and &lt;a href="https://try.github.io/levels/1/challenges/1"&gt;GitHub&lt;/a&gt;.
VSTS can integrate with many source control providers, but for the sake of having everything in one place I'm storing mine here.&lt;/p&gt;
&lt;p&gt;You want to avoid committing anything in the output or tools directories to source control.
Files in these folders are downloaded or generated automatically, which means we gain very little by tracking their changes, because any changes to these files will be the result of changes in our source files.
You can create a &lt;code&gt;.gitignore&lt;/code&gt; file and give it the following contents to tell it not to track those folders:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Ignore tools
tools/*
#Ignore output files
output/*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your source control now look similar to below, which means it's time to set up continuous integration!&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/deploying-a-wyam-blog-to-azure/source-control.png" class="img-fluid" alt="How source control should be looking" /&gt;&lt;/p&gt;
&lt;h3 id="set-up-continuous-integration"&gt;Set up continuous integration&lt;/h3&gt;
&lt;p&gt;Navigate to the build tab of your VSTS project and click the &amp;quot;+ New&amp;quot; button in the top right hand corner.
This will create a pop up with a range of pre-set build options.
We are going to be creating our own from scratch, so double click the &amp;quot;Empty&amp;quot; option at the bottom of the pop-up.
This will bring you to the following screen, here you want to select your project in source control, and tick the continuous integration box.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/deploying-a-wyam-blog-to-azure/build-definition-screen.png" class="img-fluid" alt="The create build definition screen" /&gt;&lt;/p&gt;
&lt;p&gt;When you click create you will be greeted with a fairly blank looking screen with the option to add build steps.
We will be added two build steps here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Compile our blog using Cake&lt;/li&gt;
&lt;li&gt;Take the output and store it in a shared place where it can be picked up for release&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cake is not a default option in the task catalog, so we need to add it by clicking the &amp;quot;Add build step&amp;quot; button, and then clicking the link at the bottom prompting you to check out the market place.
Here you want to search for Cake, open it up, and click install.
Now when we go back to the new build step screen, you can select Cake as an build step option.
After selecting Cake you want to change the target from &amp;quot;Default&amp;quot; to &amp;quot;Build&amp;quot;.
Our default option is perfect when we are developing our blog, but when it comes to CI, all we eed is for it to be built.&lt;/p&gt;
&lt;p&gt;You now want to add the &amp;quot;Publish Build Artifacts&amp;quot; build step, which can be found in the &amp;quot;Utility&amp;quot; section of the &amp;quot;Add build step&amp;quot; pop-up.
Get your input looking like the image below and you will be ready to go.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/deploying-a-wyam-blog-to-azure/publish-build-step.jpg" class="img-fluid" alt="Input for the publish artifact step" /&gt;&lt;/p&gt;
&lt;p&gt;Click the &amp;quot;Queue new build&amp;quot; button at the top left of the screen, and it will run through these newly created steps on the source code.
Now that we've got this set up, you will need to create an Azure instance for you to deploy to.&lt;/p&gt;
&lt;h3 id="create-an-azure-instance"&gt;Create an Azure instance&lt;/h3&gt;
&lt;p&gt;Microsoft have great documentation on how to &lt;a href="https://docs.microsoft.com/en-us/azure/app-service-web/app-service-web-how-to-create-a-web-app-in-an-ase"&gt;creating an Azure App Service&lt;/a&gt;.
Make sure that you &lt;a href="https://blog.kloud.com.au/2014/01/06/how-to-link-existing-visual-studio-online-with-windows-azure"&gt;link your VSTS account and Azure account&lt;/a&gt;, so that they can find each other.&lt;/p&gt;
&lt;h3 id="set-up-continuous-deployment"&gt;Set up continuous deployment&lt;/h3&gt;
&lt;p&gt;Last of all we create the Release definition. Navigate to the Releases tab of the &amp;quot;Build and Releases&amp;quot; screen, click the little green plus you can see in the top left, and &amp;quot;Create release definition&amp;quot;. We are deploying to an Azure App Service instance, so we can just select the top open in the pop-up.
On the following screen, select our build definition like the image below.
Make sure that you check the &amp;quot;Continuous deployment&amp;quot; checkbox. By doing this, our blog will always have the latest changes.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/deploying-a-wyam-blog-to-azure/create-release-definition.jpg" class="img-fluid" alt="Release configuration screen" /&gt;&lt;/p&gt;
&lt;p&gt;Hit create and fill out the details on the screen to the right.
If your VSTS and Azure account are linked correctly, you will be able to select your subscription and service name from the top two dropdowns.
If they do not appear, then revisit the information I've put into the &amp;quot;Create an Azure instance section&amp;quot;.
You will need to change the value of &amp;quot;Package or folder&amp;quot; to be the output folder created by our build definition.
Click the button with the ellipses in it beside the field, and select out &amp;quot;CompiledBlogFiles&amp;quot; folder.&lt;/p&gt;
&lt;p&gt;Your screen should now be looking like the image below.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/deploying-a-wyam-blog-to-azure/release-definition.jpg" class="img-fluid" alt="Release definition screen" /&gt;&lt;/p&gt;
&lt;p&gt;Now that everything is set up, you can queue up a new release by clicking the &amp;quot;+ Release&amp;quot; button, then clicking on the Create button on the pop-up.
This will build your blog with the current source code, and release it to your selected Azure environment.
We've told the release definition to use continuous deployment, and our build definition to use continuous integration, so anytime we commit new content to our blog it will be deployed to Azure.
If this doesn't sound ideal, you can always go back into those definition and uncheck those options.&lt;/p&gt;
&lt;h3 id="done"&gt;Done!&lt;/h3&gt;
&lt;p&gt;That's a wrap!
I'm still very much learning this blogging thing, so any comments would be greatly appreciated.
I realise there is plenty of improvements to be made, and I'd love to get your input on where I can make the most impact.
Cheers!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I thought I better write an article about how I've put this blog together.
I'll give a brief summary of the technologies I use, why I use them, and then go through the basic steps I've followed to put it all together.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="http://andyhansen.co.nz/posts/hello-world" />
		<link rel="enclosure" type="image" href="http://andyhansen.co.nz/images/headers/forrest-cavale-13484.jpg" />
		<id>http://andyhansen.co.nz/posts/hello-world</id>
		<title>Hello World</title>
		<updated>2017-01-23T00:00:00Z</updated>
		<content>&lt;p&gt;Hey there everyone, I'm Andy and here is where I'll be writing about all the cool new things I've been learning about. The plan at the moment is to write about topics including .NET Core, Xamarin, and DevOps.&lt;/p&gt;
&lt;p&gt;The first post which will be following this one will be about what I've built the blog in (Wyam), where I'm hosting it (Azure), and the tools I'm using to get it there (VSTS).&lt;/p&gt;
&lt;p&gt;Stay tuned!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Hey there everyone, I'm Andy and here is where I'll be writing about all the cool new things I've been learning about. The plan at the moment is to write about topics including .NET Core, Xamarin, and DevOps.&lt;/p&gt;</summary>
	</entry>
</feed>